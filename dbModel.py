from typing import List, Dict
from dbConstructs import DBObject, DBPrimitiveObject

import calcFillOrder


class DBModel:
    def __init__(self, db_object=None):
        self.db_objects: List[DBObject] = db_object or []
        self.db_primitives: Dict[str, List[DBPrimitiveObject]] = {}

    def add_db_object(self, db_object):
        self.db_objects.append(db_object)

    def update_relations_by_attributes(self):
        """
        Adds the relations' target field to the relations'
        """
        for obj in self.db_objects:
            for rel in obj.relations:
                target_object = [o for o in self.db_objects if o.name == rel.target_table][0]
                target_attribute = [a for a in target_object.attributes if a.name == rel.target_name][0]
                rel.target_attribute = target_attribute

    def toXCore(self):
        xcore_classes_strings = "\n".join([db_objects.toXCore() for db_objects in self.db_objects])
        scope_strings = ",\n   ".join([f"{db_objects.name}="
                                       f"{db_objects.scope_count_min}..{db_objects.scope_count_max}"
                                       for db_objects in self.db_objects])
        return f"{xcore_classes_strings}\n\nscope\n   {scope_strings}."

    def CSVs_to_DBPrimitives(self, csv_folder_path, db_objects_in_fill_order: List[DBObject]):
        for db_object in db_objects_in_fill_order:
            db_object.csvs_to_primitive_objects(csv_folder_path, self.db_primitives)

    def DBPrimitives_to_SQL(self, fill_ordered_db_object):
        insert_sql = ""

        insert_sql += "SET FOREIGN_KEY_CHECKS=0;\n"  # TODO check if there is a better way
        insert_sql += "\n".join([f"DELETE FROM {o.name};" for o in fill_ordered_db_object])
        insert_sql += "\nSET FOREIGN_KEY_CHECKS=1;"
        insert_sql += "\n\n"

        for table in fill_ordered_db_object:
            # Autogenerated attributes should not be inserted here
            insertable_attribute_names = [a.name for a in table.attributes if a.extra == '']
            insert_sql += f"INSERT INTO {table.name} ({','.join(insertable_attribute_names)}) VALUES\n"

            for db_primitive in self.db_primitives[table.name]:
                insert_values = []
                for attribute_name in insertable_attribute_names:
                    attribute_value = db_primitive.attributes.get(attribute_name)
                    if attribute_value is not None:
                        insert_values.append(f"{attribute_value}")
                    else:
                        insert_values.append("NULL")
                insert_sql += "(" + ",".join(insert_values) + "),"

            insert_sql = insert_sql[:-1] + ";\n"

        return insert_sql

    def CSVs_to_SQL(self, csv_folder_path):
        fill_ordered_db_object = calcFillOrder.calc_fill_order(self.db_objects)
        self.CSVs_to_DBPrimitives(csv_folder_path, fill_ordered_db_object)
        return self.DBPrimitives_to_SQL(fill_ordered_db_object)
